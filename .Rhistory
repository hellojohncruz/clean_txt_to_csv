select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
df <- data.frame()
con = file('data.txt', "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
df <- bind_rows(df, data.frame(line))
}
close(con)
# find rows that has alpha-numeric characters
for (row in df){
df$str_alpha <- str_detect(row, '[a-zA-Z0-9]')
}
# drop non-alpha-numeric rows
df_alpha_num <- df %>%
filter(., str_alpha == TRUE) %>%
select(., line)
# drop first two rows containing header info
df_alpha_num <- df_alpha_num %>%
slice(-c(1, 2))
# create empty dataframe
player_df <- data.frame()
# loop through each row
for (i in seq(1, nrow(df_alpha_num), by = 2)){
# read every odd row for player id, name and total points
row_info <- str_split_fixed(df_alpha_num[i, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_id", "player_name", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7")
colnames(df_temp) = temp_cols
df_export <- df_temp %>%
select(1:10)
# read every even row to add additional columns for player info state and pre-rating
row_info <- str_split_fixed(df_alpha_num[i+1, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_state", "pre_rating")
colnames(df_temp) = temp_cols
df_export <- bind_cols(df_export, df_temp %>%
select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]]){
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]]){
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]]){
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]])){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
}
player_df %>%
group_by(player_id)
player_df %>%
group_by(player_id) %>%
select(4:10) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
group_by(player_id) %>%
select(4:10)
player_df %>%
select(4:10) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
select(4:10) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
select(round_1:round_7)
player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
?mutate
player_df %>%
select(round_1:round_7) %>%
mutate(., avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
select(round_1:round_7)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
df <- data.frame()
con = file('data.txt', "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
df <- bind_rows(df, data.frame(line))
}
close(con)
# find rows that has alpha-numeric characters
for (row in df){
df$str_alpha <- str_detect(row, '[a-zA-Z0-9]')
}
# drop non-alpha-numeric rows
df_alpha_num <- df %>%
filter(., str_alpha == TRUE) %>%
select(., line)
# drop first two rows containing header info
df_alpha_num <- df_alpha_num %>%
slice(-c(1, 2))
# create empty dataframe
player_df <- data.frame()
# loop through each row
for (i in seq(1, nrow(df_alpha_num), by = 2)){
# read every odd row for player id, name and total points
row_info <- str_split_fixed(df_alpha_num[i, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_id", "player_name", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7")
colnames(df_temp) = temp_cols
df_export <- df_temp %>%
select(1:10)
# read every even row to add additional columns for player info state and pre-rating
row_info <- str_split_fixed(df_alpha_num[i+1, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_state", "pre_rating")
colnames(df_temp) = temp_cols
df_export <- bind_cols(df_export, df_temp %>%
select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]])){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
}
player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
select(round_1:round_7)
player_df %>%
group_by(player_id)
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
group_by(player_id)
select(4:10) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
group_by(player_id)
select(4:10)
player_df %>%
group_by(player_id) %>%
select(4:10) %>%
mutate(avg_opp_rating = rowSums(na.rm=TRUE))
player_df %>%
group_by(player_id) %>%
select(4:10)
player_df %>%
select(round_1:round_7)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
df <- data.frame()
con = file('data.txt', "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
df <- bind_rows(df, data.frame(line))
}
close(con)
# find rows that has alpha-numeric characters
for (row in df){
df$str_alpha <- str_detect(row, '[a-zA-Z0-9]')
}
# drop non-alpha-numeric rows
df_alpha_num <- df %>%
filter(., str_alpha == TRUE) %>%
select(., line)
# drop first two rows containing header info
df_alpha_num <- df_alpha_num %>%
slice(-c(1, 2))
# create empty dataframe
player_df <- data.frame()
# loop through each row
for (i in seq(1, nrow(df_alpha_num), by = 2)){
# read every odd row for player id, name and total points
row_info <- str_split_fixed(df_alpha_num[i, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_id", "player_name", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7")
colnames(df_temp) = temp_cols
df_export <- df_temp %>%
select(1:10)
# read every even row to add additional columns for player info state and pre-rating
row_info <- str_split_fixed(df_alpha_num[i+1, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_state", "pre_rating")
colnames(df_temp) = temp_cols
df_export <- bind_cols(df_export, df_temp %>%
select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]])){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
}
player_df %>%
group_by(player_id) %>%
mutate(avg_opp_rating = rowSums(., round_1:round_7))
player_df %>%
mutate(avg_opp_rating = rowSums(., round_1:round_7))
player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowSums(., round_1:round_7))
player_df <- player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowMeans(., round_1:round_7) / )
player_df <- player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowMeans(., round_1:round_7))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
df <- data.frame()
con = file('data.txt', "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
df <- bind_rows(df, data.frame(line))
}
close(con)
# find rows that has alpha-numeric characters
for (row in df){
df$str_alpha <- str_detect(row, '[a-zA-Z0-9]')
}
# drop non-alpha-numeric rows
df_alpha_num <- df %>%
filter(., str_alpha == TRUE) %>%
select(., line)
# drop first two rows containing header info
df_alpha_num <- df_alpha_num %>%
slice(-c(1, 2))
# create empty dataframe
player_df <- data.frame()
# loop through each row
for (i in seq(1, nrow(df_alpha_num), by = 2)){
# read every odd row for player id, name and total points
row_info <- str_split_fixed(df_alpha_num[i, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_id", "player_name", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7")
colnames(df_temp) = temp_cols
df_export <- df_temp %>%
select(1:10)
# read every even row to add additional columns for player info state and pre-rating
row_info <- str_split_fixed(df_alpha_num[i+1, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_state", "pre_rating")
colnames(df_temp) = temp_cols
df_export <- bind_cols(df_export, df_temp %>%
select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]])){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
}
player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowMeans(., round_1:round_7))
View(df_temp)
View(player_df)
player_df <- player_df %>%
select(round_1:round_7) %>%
mutate(avg_opp_rating = rowMeans(., round_1:round_7))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
df <- data.frame()
con = file('data.txt', "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
df <- bind_rows(df, data.frame(line))
}
close(con)
# find rows that has alpha-numeric characters
for (row in df){
df$str_alpha <- str_detect(row, '[a-zA-Z0-9]')
}
# drop non-alpha-numeric rows
df_alpha_num <- df %>%
filter(., str_alpha == TRUE) %>%
select(., line)
# drop first two rows containing header info
df_alpha_num <- df_alpha_num %>%
slice(-c(1, 2))
# create empty dataframe
player_df <- data.frame()
# loop through each row
for (i in seq(1, nrow(df_alpha_num), by = 2)){
# read every odd row for player id, name and total points
row_info <- str_split_fixed(df_alpha_num[i, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_id", "player_name", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7")
colnames(df_temp) = temp_cols
df_export <- df_temp %>%
select(1:10)
# read every even row to add additional columns for player info state and pre-rating
row_info <- str_split_fixed(df_alpha_num[i+1, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_state", "pre_rating")
colnames(df_temp) = temp_cols
df_export <- bind_cols(df_export, df_temp %>%
select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]])){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
}
player_df %>%
mutate(avg_opp_rating = rowMeans(., round_1:round_7))
?rowMeans
player_df %>%
mutate(avg_opp_rating = rowMeans(., pick(round_1:round_7))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
df <- data.frame()
con = file('data.txt', "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
df <- bind_rows(df, data.frame(line))
}
close(con)
# find rows that has alpha-numeric characters
for (row in df){
df$str_alpha <- str_detect(row, '[a-zA-Z0-9]')
}
# drop non-alpha-numeric rows
df_alpha_num <- df %>%
filter(., str_alpha == TRUE) %>%
select(., line)
# drop first two rows containing header info
df_alpha_num <- df_alpha_num %>%
slice(-c(1, 2))
# create empty dataframe
player_df <- data.frame()
# loop through each row
for (i in seq(1, nrow(df_alpha_num), by = 2)){
# read every odd row for player id, name and total points
row_info <- str_split_fixed(df_alpha_num[i, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_id", "player_name", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7")
colnames(df_temp) = temp_cols
df_export <- df_temp %>%
select(1:10)
# read every even row to add additional columns for player info state and pre-rating
row_info <- str_split_fixed(df_alpha_num[i+1, ],regex("|", literal=TRUE),n=Inf)
df_temp <- data.frame(row_info)
temp_cols <- c("player_state", "pre_rating")
colnames(df_temp) = temp_cols
df_export <- bind_cols(df_export, df_temp %>%
select(1:2))
# extract individual player info to all players dataframe
player_df <- bind_rows(player_df, df_export)
}
for (i in 4:10){
player_df[, i] <- gsub("[^0-9]", "", player_df[, i])
}
player_df <- player_df %>%
separate_wider_delim(pre_rating, delim = ": ", names = c('rtg_1', 'rtg_2'))
player_df$pre_rating <- player_df$rtg_2 %>% parse_number()
player_df <- player_df %>%
mutate(across(where(is.character), str_trim))
change_type <- c("player_id", "total_pts", "round_1", "round_2", "round_3", "round_4", "round_5", "round_6", "round_7", "pre_rating")
player_df <- player_df %>%
mutate_at(change_type, as.numeric)
for (i in 1:nrow(player_df)){
for (j in 4:10){
if (!is.na(player_df[[i,j]])){
player_df[i,j] <- player_df %>%
filter(., player_id == player_df[[i, j]]) %>%
select(pre_rating)
}
}
}
player_df %>%
mutate(avg_opp_rating = rowMeans(., pick(round_1:round_7)))
?dplyr::pick
??dplyr::pick
packageVersion("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("dplyr")
install.packages(c("boot", "class", "codetools", "dplyr", "flextable", "forcats", "foreign", "fs", "gargle", "ggplot2", "httpuv", "lubridate", "markdown", "MASS", "Matrix", "nlme", "readr", "readxl", "RPostgreSQL", "sourcetools", "spatial", "survival", "tinytex", "utf8", "xfun"))
